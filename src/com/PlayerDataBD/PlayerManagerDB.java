package com.PlayerDataBD;
import com.entity.Player;

import oracle.jdbc.pool.OracleDataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class PlayerManagerDB {
    private Connection conn;
    private Player player = new Player();

    public PlayerManagerDB() throws Exception{
        getConnected();
    }

    public void deletePlayerInfoTable() throws  SQLException {
        PreparedStatement ps = conn.prepareStatement(
                "SELECT count(*) FROM user_tables WHERE table_name = 'PLAYERINFO'");
        ResultSet rs = ps.executeQuery();

        if (rs.next() && rs.getInt(1) > 0) {
            ps = conn.prepareStatement("DROP TABLE PlayerInfo");
            ps.executeQuery();
            System.out.println("Table playerInfo deletada");
        } else {
            System.out.println("N foi possivel excluir a mesa");
        }
    }
    public void createPlayerInfoTable() throws SQLException {
        PreparedStatement ps = conn.prepareStatement(
                "SELECT count(*) FROM user_tables WHERE table_name = 'PLAYERINFO'");
        ResultSet rs = ps.executeQuery();

        if (rs.next() && rs.getInt(1) == 0) {
            ps = conn.prepareStatement(
                    "CREATE TABLE playerInfo (" +
                            "id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY," +
                            "nickname VARCHAR2(50) NOT NULL," +
                            "email VARCHAR2(50) NOT NULL," +
                            "cep VARCHAR(11) NOT NULL," +
                            "end VARCHAR(255) NOT NULL," +
                            "img VARCHAR(255)," +
                            "positionX NUMBER(6)," +
                            "positionY NUMBER(6)" +
                            ")"
            );
            ps.executeUpdate();
            System.out.println("Table PlayerInfo criada.");
        } else {
            System.out.println("Mesa PlayerInfo já existe!");
        }
    }

    public void getConnected() throws SQLException {
        OracleDataSource ods = new OracleDataSource();
        //configurando url
        ods.setURL(OrclFiap.connUrl);
        ods.setUser(OrclFiap.user); // criar classe Dados com final
        ods.setPassword(OrclFiap.pwd);

        try {
            conn = ods.getConnection();
        } catch (SQLException e) {
            System.err.println(e);
            System.err.println(e.getStackTrace());
        }
    }
    public void create(PlayerInfo pi) throws Exception{
        String query_sql = "INSERT INTO PlayerInfo(nickname, email, cep, end, img, positionX, positionY) VALUES(?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement ps = conn.prepareStatement(query_sql);
        ps.setString(1, pi.getNickname());
        ps.setString(2, pi.getEmail());
        ps.setString(3, pi.getCep());
        ps.setString(4, pi.getEndereco());
        ps.setString(5, "playerDown");
        ps.setString(6, String.valueOf(player.position.getX()));
        ps.setString(7, String.valueOf(player.position.getY()));
        ps.executeQuery();
        conn.close();
        System.out.println("Player adicionado com sucesso!");
    }
    public List<PlayerInfo> read() throws Exception {
        getConnected();
        List<PlayerInfo> pi = new ArrayList<>();
        String query_sql = "SELECT * FROM PlayerInfo";
        PreparedStatement ps = conn.prepareStatement(query_sql);
        ResultSet rs = ps.executeQuery();
        while (rs.next()) {
            String nickname = rs.getString("nickname");
            String email = rs.getString("email");
            String cep = rs.getString("cep");
            pi.add(new PlayerInfo(nickname, email, cep));
        }
        return pi;
    }

    public void update(PlayerInfo pi) throws Exception {
        getConnected();
        String querySql = "UPDATE PlayerInfo SET nickname = ?, email = ?, cep = ?" +
                "WHERE nickname = ? ";
        try { // esses numeros correspondem a ordem das interrogacoes da query
            PreparedStatement ps = conn.prepareStatement(querySql);
            ps.setString(1, pi.getNickname());
            ps.setString(2, pi.getEmail());
            ps.setString(3, pi.getCep());
            ps.setString(4, pi.getNickname());

            ps.executeQuery();
        } catch (SQLException e) {
            if (conn == null) {
                System.err.println("Erro na transacao update(): " +
                        e.getMessage() + "\n" +
                        e.getStackTrace());
            }
        } finally {
            System.out.println("User: " + pi.getNickname() + " updated.");
            conn.close();
        }
    }

    public void delete(String nick) throws Exception {
        getConnected();
        String query_sql = "DELETE FROM PlayerInfo WHERE nickname = ?";
        try {
            PreparedStatement ps = conn.prepareStatement(query_sql);
            ps.setString(1, nick);
            ps.executeQuery();
        } catch (Exception e) {
            if (conn != null) {
                System.err.println("Erro na transação delete(): " + e.getMessage());
            }
        } finally {
            System.out.println("User: " + nick + " deleted.");
            conn.close();
        }
    }
}
